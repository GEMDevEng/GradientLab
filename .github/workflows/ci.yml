name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
        pip install pytest pytest-cov

    - name: Lint Python code
      run: |
        pip install flake8
        flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ --cov=. --cov-report=xml

    - name: Upload coverage report
      uses: codecov/codecov-action@v2
      with:
        file: ./backend/coverage.xml
        flags: backend
        fail_ci_if_error: false

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm install

    - name: Lint JavaScript code
      run: |
        cd frontend
        npm run lint || true

    - name: Run frontend tests
      run: |
        cd frontend
        CI=true npm test -- --coverage

    - name: Upload coverage report
      uses: codecov/codecov-action@v2
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        fail_ci_if_error: false

  build:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm install

    - name: Build React app
      run: |
        cd frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: frontend-build
        path: frontend/build

  deploy-frontend:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: frontend-build
        path: frontend/build

    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@4.1.4
      with:
        branch: gh-pages
        folder: frontend/build
        clean: true

  deploy-backend:
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install Heroku CLI
      run: curl https://cli-assets.heroku.com/install.sh | sh

    - name: Login to Heroku
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku container:login

    - name: Build and push Docker image
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        cd backend
        heroku container:push web --app gradientlab-api

    - name: Release Docker image
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        heroku container:release web --app gradientlab-api
